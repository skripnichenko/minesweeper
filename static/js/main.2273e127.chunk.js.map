{"version":3,"sources":["types/types.ts","components/Button/Button.tsx","components/NumberDisplay/NumberDisplay.tsx","utils/generateCells.ts","constants/constants.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CellValue","CellState","Face","Button","row","col","state","value","onCellClick","onClickContextMenu","isRed","className","visible","onClick","onContextMenu","bomb","role","aria-label","none","flagged","NumberDisplay","toString","padStart","Math","abs","checkAdjacentCells","cells","rowInd","colInd","topLeftCell","topCell","topRightCell","MAX_COLS","rightCell","bottomRightCell","MAX_ROWS","bottomCell","bottomLeftCell","leftCell","generateCells","raw","push","open","bombsPlaced","rowBomb","floor","random","colBomb","map","currentCell","numberOfBombs","openAdjacentNoneCells","curCell","newCells","slice","App","useState","setCells","smile","face","setFace","time","setTime","isStarted","setIsStarted","setNumberOfBombs","lost","setLost","won","setWon","useEffect","handleDown","oh","handleUp","window","addEventListener","removeEventListener","timer","setInterval","prevTime","clearInterval","handleCellClick","currentCells","includes","red","showAllBombs","safeOpenCells","isABomb","e","preventDefault","prev","i_row","i_col","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sMAAYA,EAaEC,EAQAC,E,oEArBFF,O,eAAAA,I,aAAAA,I,aAAAA,I,iBAAAA,I,eAAAA,I,eAAAA,I,aAAAA,I,iBAAAA,I,iBAAAA,I,gBAAAA,M,cAaEC,O,eAAAA,I,qBAAAA,I,sBAAAA,M,cAQAC,K,qBAAAA,E,kBAAAA,E,mBAAAA,E,qBAAAA,M,eCkBCC,EAzBuB,SAAC,GAAwE,IAAtEC,EAAqE,EAArEA,IAAKC,EAAgE,EAAhEA,IAAKC,EAA2D,EAA3DA,MAAOC,EAAoD,EAApDA,MAAOC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,mBAAoBC,EAAY,EAAZA,MAkB9F,OACI,qBAAKC,UAAS,iBAAYL,IAAUL,EAAUW,QAAU,UAAY,GAAtD,kBAAkEL,EAAlE,YAA2EG,EAAQ,MAAQ,IAAMG,QAASL,EAAYJ,EAAKC,GAAOS,cAAeL,EAAmBL,EAAKC,GAAvL,SAjBIC,IAAUL,EAAUW,QAChBL,IAAUP,EAAUe,KACb,sBAAMC,KAAK,MAAMC,aAAW,OAA5B,0BAGAV,IAAUP,EAAUkB,KACpB,KAEJX,EAEAD,IAAUL,EAAUkB,QACpB,sBAAMH,KAAK,MAAMC,aAAW,OAA5B,+BADJ,KCXAG,G,MARqC,SAAC,GAAa,IAAZb,EAAW,EAAXA,MAClD,OACI,qBAAKI,UAAU,gBAAf,SACKJ,GAAS,EAAIA,EAAMc,WAAWC,SAAS,EAAG,KAA1C,WAAqDC,KAAKC,IAAIjB,GAAOc,WAAWC,SAAS,EAAG,UCPnGG,EAAqB,SAACC,EAAiBC,EAAgBC,GAWzD,IAAMC,EAAcF,EAAS,GAAKC,EAAS,EAAIF,EAAMC,EAAS,GAAGC,EAAS,GAAK,KACzEE,EAAUH,EAAS,EAAID,EAAMC,EAAS,GAAGC,GAAU,KACnDG,EAAeJ,EAAS,GAAKC,EAASI,EAAeN,EAAMC,EAAS,GAAGC,EAAS,GAAK,KACrFK,EAAYL,EAASI,EAAeN,EAAMC,GAAQC,EAAS,GAAK,KAChEM,EAAkBP,EAASQ,GAAgBP,EAASI,EAAeN,EAAMC,EAAS,GAAGC,EAAS,GAAK,KACnGQ,EAAaT,EAASQ,EAAeT,EAAMC,EAAS,GAAGC,GAAU,KACjES,EAAiBV,EAASQ,GAAgBP,EAAS,EAAIF,EAAMC,EAAS,GAAGC,EAAS,GAAK,KAE7F,MAAO,CACHC,cACAC,UACAC,eACAO,SALaV,EAAS,EAAIF,EAAMC,GAAQC,EAAS,GAAK,KAMtDK,YACAI,iBACAD,aACAF,oBAIKK,EAAgB,WAGzB,IAFA,IAAIb,EAAkB,GAEbc,EAAM,EAAGA,ECrCE,EDqCcA,IAAO,CACrCd,EAAMe,KAAK,IACX,IAAK,IAAIpC,EAAM,EAAGA,ECtCF,EDsCkBA,IAC9BqB,EAAMc,GAAKC,KAAK,CACZlC,MAAOP,EAAUkB,KACjBZ,MAAOL,EAAUyC,OAO7B,IAFA,IAAIC,EAAc,EAbuB,aAgBrC,IAAMC,EAAUrB,KAAKsB,MClDL,EDkDWtB,KAAKuB,UAC1BC,EAAUxB,KAAKsB,MClDL,EDkDWtB,KAAKuB,UACZpB,EAAMkB,GAASG,GAEnBxC,QAAUP,EAAUe,OAChCW,EAAQA,EAAMsB,KAAI,SAAC5C,EAAKuB,GAAN,OAAiBvB,EAAI4C,KAAI,SAAC3C,EAAKuB,GAC7C,OAAIgB,IAAYjB,GAAUoB,IAAYnB,EAC3B,2BACAvB,GADP,IAEIE,MAAOP,EAAUe,OAGlBV,SAGfsC,KAhBGA,EC/CiB,ID+CY,IAmBpC,IAAK,IAAIhB,EAAS,EAAGA,ECpED,EDoEoBA,IACpC,IAAK,IAAIC,EAAS,EAAGA,ECpEL,EDoEwBA,IAAU,CAC9C,IAAMqB,EAAcvB,EAAMC,GAAQC,GAClC,GAAIqB,EAAY1C,QAAUP,EAAUe,KAApC,CAGA,IAAImC,EAAgB,EAL0B,EAgB1CzB,EAAmBC,EAAOC,EAAQC,GARlCC,EAR0C,EAQ1CA,YACAC,EAT0C,EAS1CA,QACAC,EAV0C,EAU1CA,aACAO,EAX0C,EAW1CA,SACAL,EAZ0C,EAY1CA,UACAI,EAb0C,EAa1CA,eACAD,EAd0C,EAc1CA,WACAF,EAf0C,EAe1CA,iBAEW,OAAXL,QAAW,IAAXA,OAAA,EAAAA,EAAatB,SAAUP,EAAUe,MACjCmC,KAEO,OAAPpB,QAAO,IAAPA,OAAA,EAAAA,EAASvB,SAAUP,EAAUe,MAC7BmC,KAEY,OAAZnB,QAAY,IAAZA,OAAA,EAAAA,EAAcxB,SAAUP,EAAUe,MAClCmC,KAES,OAATjB,QAAS,IAATA,OAAA,EAAAA,EAAW1B,SAAUP,EAAUe,MAC/BmC,KAEe,OAAfhB,QAAe,IAAfA,OAAA,EAAAA,EAAiB3B,SAAUP,EAAUe,MACrCmC,KAEU,OAAVd,QAAU,IAAVA,OAAA,EAAAA,EAAY7B,SAAUP,EAAUe,MAChCmC,KAEc,OAAdb,QAAc,IAAdA,OAAA,EAAAA,EAAgB9B,SAAUP,EAAUe,MACpCmC,KAEQ,OAARZ,QAAQ,IAARA,OAAA,EAAAA,EAAU/B,SAAUP,EAAUe,MAC9BmC,IAEAA,EAAgB,IAChBxB,EAAMC,GAAQC,GAAd,2BACOqB,GADP,IAEI1C,MAAO2C,MAOvB,OAAOxB,GAGEyB,EAAwB,SAAxBA,EAAyBzB,EAAiBC,EAAgBC,GACnE,IAAMwB,EAAU1B,EAAMC,GAAQC,GAE9B,GAAIwB,EAAQ9C,QAAUL,EAAUW,SAAWwC,EAAQ9C,QAAUL,EAAUkB,QAAS,OAAOO,EAEvF,IAAI2B,EAAW3B,EAAM4B,QACrBD,EAAS1B,GAAQC,GAAQtB,MAAQL,EAAUW,QANqD,MAiB5Fa,EAAmBC,EAAOC,EAAQC,GARlCC,EAT4F,EAS5FA,YACAC,EAV4F,EAU5FA,QACAC,EAX4F,EAW5FA,aACAO,EAZ4F,EAY5FA,SACAL,EAb4F,EAa5FA,UACAI,EAd4F,EAc5FA,eACAD,EAf4F,EAe5FA,WACAF,EAhB4F,EAgB5FA,gBAmEJ,OAhEe,OAAXL,QAAW,IAAXA,OAAA,EAAAA,EAAavB,SAAUL,EAAUyC,MAAQb,EAAYtB,QAAUP,EAAUe,OACrEc,EAAYtB,QAAUP,EAAUkB,KAChCmC,EAAWF,EAAsBE,EAAU1B,EAAS,EAAGC,EAAS,GAEhEyB,EAAS1B,EAAS,GAAGC,EAAS,GAAGtB,MAAQL,EAAUW,UAIhD,OAAPkB,QAAO,IAAPA,OAAA,EAAAA,EAASxB,SAAUL,EAAUyC,MAAQZ,EAAQvB,QAAUP,EAAUe,OAC7De,EAAQvB,QAAUP,EAAUkB,KAC5BmC,EAAWF,EAAsBE,EAAU1B,EAAS,EAAGC,GAEvDyB,EAAS1B,EAAS,GAAGC,GAAQtB,MAAQL,EAAUW,UAIvC,OAAZmB,QAAY,IAAZA,OAAA,EAAAA,EAAczB,SAAUL,EAAUyC,MAAQX,EAAaxB,QAAUP,EAAUe,OACvEgB,EAAaxB,QAAUP,EAAUkB,KACjCmC,EAAWF,EAAsBE,EAAU1B,EAAS,EAAGC,EAAS,GAEhEyB,EAAS1B,EAAS,GAAGC,EAAS,GAAGtB,MAAQL,EAAUW,UAI/C,OAAR0B,QAAQ,IAARA,OAAA,EAAAA,EAAUhC,SAAUL,EAAUyC,MAAQJ,EAAS/B,QAAUP,EAAUe,OAC/DuB,EAAS/B,QAAUP,EAAUkB,KAC7BmC,EAAWF,EAAsBE,EAAU1B,EAAQC,EAAS,GAE5DyB,EAAS1B,GAAQC,EAAS,GAAGtB,MAAQL,EAAUW,UAI1C,OAATqB,QAAS,IAATA,OAAA,EAAAA,EAAW3B,SAAUL,EAAUyC,MAAQT,EAAU1B,QAAUP,EAAUe,OACjEkB,EAAU1B,QAAUP,EAAUkB,KAC9BmC,EAAWF,EAAsBE,EAAU1B,EAAQC,EAAS,GAE5DyB,EAAS1B,GAAQC,EAAS,GAAGtB,MAAQL,EAAUW,UAIrC,OAAdyB,QAAc,IAAdA,OAAA,EAAAA,EAAgB/B,SAAUL,EAAUyC,MAAQL,EAAe9B,QAAUP,EAAUe,OAC3EsB,EAAe9B,QAAUP,EAAUkB,KACnCmC,EAAWF,EAAsBE,EAAU1B,EAAS,EAAGC,EAAS,GAEhEyB,EAAS1B,EAAS,GAAGC,EAAS,GAAGtB,MAAQL,EAAUW,UAI7C,OAAVwB,QAAU,IAAVA,OAAA,EAAAA,EAAY9B,SAAUL,EAAUyC,MAAQN,EAAW7B,QAAUP,EAAUe,OACnEqB,EAAW7B,QAAUP,EAAUkB,KAC/BmC,EAAWF,EAAsBE,EAAU1B,EAAS,EAAGC,GAEvDyB,EAAS1B,EAAS,GAAGC,GAAQtB,MAAQL,EAAUW,UAIpC,OAAfsB,QAAe,IAAfA,OAAA,EAAAA,EAAiB5B,SAAUL,EAAUyC,MAAQR,EAAgB3B,QAAUP,EAAUe,OAC7EmB,EAAgB3B,QAAUP,EAAUkB,KACpCmC,EAAWF,EAAsBE,EAAU1B,EAAS,EAAGC,EAAS,GAEhEyB,EAAS1B,EAAS,GAAGC,EAAS,GAAGtB,MAAQL,EAAUW,SAIpDyC,GENIE,MAhMf,WAAgB,IAAD,EACaC,mBAAmBjB,KADhC,mBACNb,EADM,KACC+B,EADD,OAEWD,mBAAiBtD,EAAKwD,OAFjC,mBAENC,EAFM,KAEAC,EAFA,OAGWJ,mBAAiB,GAH5B,mBAGNK,EAHM,KAGAC,EAHA,OAIqBN,oBAAkB,GAJvC,mBAINO,EAJM,KAIKC,EAJL,OAK6BR,mBAAiB,IAL9C,mBAKNN,EALM,KAKSe,EALT,OAMWT,oBAAkB,GAN7B,mBAMNU,EANM,KAMAC,EANA,OAOSX,oBAAkB,GAP3B,mBAONY,EAPM,KAODC,EAPC,KASbC,qBAAU,WACR,IAAKJ,IAASE,EAAK,CACjB,IAAMG,EAAa,WACnBX,EAAQ1D,EAAKsE,KAETC,EAAW,WACfb,EAAQ1D,EAAKwD,QAKf,OAHAgB,OAAOC,iBAAiB,YAAaJ,GACrCG,OAAOC,iBAAiB,UAAWF,GAE5B,WACLC,OAAOE,oBAAoB,YAAaL,GACxCG,OAAOE,oBAAoB,UAAWH,QAM1CH,qBAAU,WACR,GAAIP,GAAaF,EAAO,IAAK,CAC3B,IAAMgB,EAAQC,aAAY,WACxBhB,GAAQ,SAAAiB,GAAQ,OAAIA,EAAW,OAC9B,KACH,OAAO,WACLC,cAAcH,OAGjB,CAACd,EAAWF,IAGfS,qBAAU,WACJJ,IACFF,GAAa,GACbJ,EAAQ1D,EAAKgE,SAEd,CAACA,IAEJI,qBAAU,WACJF,IACFJ,GAAa,GACbJ,EAAQ1D,EAAKkE,QAEd,CAACA,IAEJ,IAAMa,EAAkB,SAAC7E,EAAaC,GAAd,OAA8B,WAEpD,IAAI6D,EAAJ,CAEA,IAAIgB,EAAexD,EAAM4B,QACrBF,EAAU1B,EAAMtB,GAAKC,GAEzB,IAAI,CAACJ,EAAUkB,QAASlB,EAAUW,SAASuE,SAAS/B,EAAQ9C,OAA5D,CAIA,GAAI8C,EAAQ7C,QAAUP,EAAUe,KAM9B,OALAoD,GAAQ,GACRe,EAAa9E,GAAKC,GAAK+E,KAAM,EAC7BF,EAAeG,IACf5B,EAASyB,QACTpB,EAAQD,GAECT,EAAQ7C,QAAUP,EAAUkB,KACrCiC,EAAsB+B,EAAc9E,EAAKC,GAEzC6E,EAAa9E,GAAKC,GAAKC,MAAQL,EAAUW,QAO3C,IAFA,IAAI0E,GAAgB,EAEXlF,EAAM,EAAGA,ED1FE,EC0FcA,IAChC,IAAK,IAAIC,EAAM,EAAGA,ED1FA,EC0FgBA,IAAO,CAGvC,GAFgB6E,EAAa9E,GAAKC,GAEtBC,QAAUL,EAAUyC,KAAM,CACpC4C,GAAgB,EAChB,OAKN,IAAKvB,EAAW,CAEd,IADA,IAAIwB,EAAUL,EAAa9E,GAAKC,GAAKE,QAAUP,EAAUe,KAClDwE,GAEL,IADAL,EAAe3C,KACEnC,GAAKC,GAAKE,QAAUP,EAAUe,KAAM,CACnDwE,GAAU,EACV,MAGJvB,GAAa,GAGVsB,IACHJ,EAAeA,EAAalC,KAAI,SAAA5C,GAAG,OACjCA,EAAI4C,KAAI,SAAA3C,GACN,OAAIA,EAAIE,QAAUP,EAAUe,KACnB,2BACFV,GADL,IAEEC,MAAOL,EAAUkB,UAGdd,QAGXgE,GAAO,QAKL5D,EAAqB,SAACL,EAAaC,GAAd,OAA8B,SAACmF,GAGxD,GAFAA,EAAEC,iBAEG1B,EAAL,CAIA,IAAMmB,EAAexD,EAAM4B,QACrBF,EAAU1B,EAAMtB,GAAKC,GAEvB+C,EAAQ9C,QAAUL,EAAUW,UAErBwC,EAAQ9C,QAAUL,EAAUyC,MACrCwC,EAAa9E,GAAKC,GAAKC,MAAQL,EAAUkB,QACzCsC,EAASyB,GACTjB,GAAiB,SAAAyB,GAAI,OAAIA,EAAO,MACvBtC,EAAQ9C,QAAUL,EAAUkB,UACrC+D,EAAa9E,GAAKC,GAAKC,MAAQL,EAAUyC,KACzCe,EAASyB,GACTjB,GAAiB,SAAAyB,GAAI,OAAIA,EAAO,UAc9BL,EAAe,WAEnB,OADqB3D,EAAM4B,QACPN,KAAI,SAAC5C,GAAD,OAASA,EAAI4C,KAAI,SAAC3C,GACxC,OAAIA,EAAIE,QAAUP,EAAUe,KACnB,2BACFV,GADL,IAEEC,MAAOL,EAAUW,UAGdP,SAUX,OAAQ,sBAAKM,UAAU,MAAf,UACN,sBAAKA,UAAU,SAAf,UACE,cAAC,EAAD,CAAeJ,MAAO2C,IACtB,qBAAKvC,UAAU,OAAOE,QAhCN,WAClB+C,EAAQ1D,EAAKwD,OACbS,GAAQ,GACRE,GAAO,GACPL,GAAa,GACbF,EAAQ,GACRL,EAASlB,MA0BP,SACE,sBAAMvB,KAAK,MAAMC,aAAW,OAA5B,SACG0C,MAGL,cAAC,EAAD,CAAepD,MAAOsD,OAGxB,qBAAKlD,UAAU,OAAf,SAhBOe,EAAMsB,KAAI,SAAC5C,EAAKuF,GAAN,OAAgBvF,EAAI4C,KAAI,SAAC3C,EAAKuF,GAAN,OAAgB,cAAC,EAAD,CAAkCrF,MAAOF,EAAIE,MACpGD,MAAOD,EAAIC,MAAOF,IAAKuF,EAAOtF,IAAKuF,EAAOpF,YAAayE,EACvDxE,mBAAoBA,EAAoBC,MAAOL,EAAI+E,KAFI,UAAgBO,EAAhB,YAAyBC,gBCnKvEC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAG1BZ,M","file":"static/js/main.2273e127.chunk.js","sourcesContent":["export enum CellValue {\n    none,\n    one,\n    two,\n    three,\n    four,\n    five,\n    six,\n    seven,\n    eight,\n    bomb\n  }\n  \n  export enum CellState {\n    open,\n    visible,\n    flagged\n  }\n  \n  export type Cell = { value: CellValue; state: CellState; red?: boolean };\n\n  export enum Face {\n    smile = 'ðŸ™‚',\n    oh = 'ðŸ˜²',\n    won = 'ðŸ˜Ž',\n    lost = 'ðŸ˜£'\n  }","import React from 'react';\nimport { CellState, CellValue } from '../../types/types';\nimport './Button.scss';\n\ninterface ButtonProps {\n    row: number;\n    col: number;\n    state: CellState;\n    value: CellValue;\n    onCellClick(row: number, col: number): (...args: any[]) => void;\n    onClickContextMenu(row: number, col: number): (...args: any[]) => void;\n    isRed?: boolean;\n}\n\nconst Button: React.FC<ButtonProps> = ({ row, col, state, value, onCellClick, onClickContextMenu, isRed }) => {\n    const renderContent = (): React.ReactNode => {\n        if (state === CellState.visible) {\n            if (value === CellValue.bomb) {\n                return <span role='img' aria-label='bomb'>\n                    ðŸ’£\n                </span>\n            } else if (value === CellValue.none) {\n                return null;\n            }\n            return value;\n\n        } else if (state === CellState.flagged) {\n            return <span role='img' aria-label='bomb'>\n                ðŸš©\n        </span>\n        }\n    }\n    return (\n        <div className={`button ${state === CellState.visible ? 'visible' : ''} value-${value} ${isRed ? 'red' : ''}`} onClick={onCellClick(row, col)}  onContextMenu={onClickContextMenu(row, col)}>\n            {renderContent()}\n        </div>\n    )\n}\n\nexport default Button;","import React from 'react'\nimport './NumberDisplay.scss';\n\ninterface NumberDisplayProps {\n    value: number;\n}\n\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({value}) => {\n    return (\n        <div className='NumberDisplay'>\n            {value >= 0 ? value.toString().padStart(3, '0') : `-${Math.abs(value).toString().padStart(2, '0')}`}\n        </div>\n    )\n}\n\nexport default NumberDisplay\n\n","import { MAX_ROWS, MAX_COLS, NUM_OF_BOMBS } from '../constants/constants';\nimport { Cell, CellState, CellValue } from './../types/types';\n\nconst checkAdjacentCells = (cells: Cell[][], rowInd: number, colInd: number): {\n    topLeftCell: Cell | null;\n    topCell: Cell | null;\n    topRightCell: Cell | null;\n    leftCell: Cell | null;\n    rightCell: Cell | null;\n    bottomLeftCell: Cell | null;\n    bottomCell: Cell | null;\n    bottomRightCell: Cell | null;\n} => {\n\n    const topLeftCell = rowInd > 0 && colInd > 0 ? cells[rowInd - 1][colInd - 1] : null;\n    const topCell = rowInd > 0 ? cells[rowInd - 1][colInd] : null;\n    const topRightCell = rowInd > 0 && colInd < MAX_COLS - 1 ? cells[rowInd - 1][colInd + 1] : null;\n    const rightCell = colInd < MAX_COLS - 1 ? cells[rowInd][colInd + 1] : null;\n    const bottomRightCell = rowInd < MAX_ROWS - 1 && colInd < MAX_COLS - 1 ? cells[rowInd + 1][colInd + 1] : null;\n    const bottomCell = rowInd < MAX_ROWS - 1 ? cells[rowInd + 1][colInd] : null;\n    const bottomLeftCell = rowInd < MAX_ROWS - 1 && colInd > 0 ? cells[rowInd + 1][colInd - 1] : null;\n    const leftCell = colInd > 0 ? cells[rowInd][colInd - 1] : null;\n    return {\n        topLeftCell,\n        topCell,\n        topRightCell,\n        leftCell,\n        rightCell,\n        bottomLeftCell,\n        bottomCell,\n        bottomRightCell\n    }\n}\n\nexport const generateCells = (): Cell[][] => {\n    let cells: Cell[][] = [];\n\n    for (let raw = 0; raw < MAX_ROWS; raw++) {\n        cells.push([]);\n        for (let col = 0; col < MAX_COLS; col++) {\n            cells[raw].push({\n                value: CellValue.none,\n                state: CellState.open\n            })\n        }\n    }\n\n    let bombsPlaced = 0;\n\n    while (bombsPlaced < NUM_OF_BOMBS) {\n        const rowBomb = Math.floor(Math.random() * MAX_ROWS);\n        const colBomb = Math.floor(Math.random() * MAX_COLS);\n        const currentCell = cells[rowBomb][colBomb];\n\n        if (currentCell.value !== CellValue.bomb) {\n            cells = cells.map((row, rowInd) => row.map((col, colInd) => {\n                if (rowBomb === rowInd && colBomb === colInd) {\n                    return {\n                        ...col,\n                        value: CellValue.bomb\n                    }\n                }\n                return col;\n            }))\n        }\n        bombsPlaced++;\n    }\n\n    for (let rowInd = 0; rowInd < MAX_ROWS; rowInd++) {\n        for (let colInd = 0; colInd < MAX_COLS; colInd++) {\n            const currentCell = cells[rowInd][colInd];\n            if (currentCell.value === CellValue.bomb) {\n                continue;\n            }\n            let numberOfBombs = 0;\n\n            const {\n                topLeftCell,\n                topCell,\n                topRightCell,\n                leftCell,\n                rightCell,\n                bottomLeftCell,\n                bottomCell,\n                bottomRightCell\n            } = checkAdjacentCells(cells, rowInd, colInd);\n            if (topLeftCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (topCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (topRightCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (rightCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (bottomRightCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (bottomCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (bottomLeftCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (leftCell?.value === CellValue.bomb) {\n                numberOfBombs++;\n            }\n            if (numberOfBombs > 0) {\n                cells[rowInd][colInd] = {\n                    ...currentCell,\n                    value: numberOfBombs\n                }\n            }\n\n        }\n    }\n\n    return cells;\n}\n\nexport const openAdjacentNoneCells = (cells: Cell[][], rowInd: number, colInd: number): Cell[][] => {\n    const curCell = cells[rowInd][colInd];\n\n    if (curCell.state === CellState.visible || curCell.state === CellState.flagged) return cells;\n\n    let newCells = cells.slice();\n    newCells[rowInd][colInd].state = CellState.visible;\n\n    const {\n        topLeftCell,\n        topCell,\n        topRightCell,\n        leftCell,\n        rightCell,\n        bottomLeftCell,\n        bottomCell,\n        bottomRightCell\n    } = checkAdjacentCells(cells, rowInd, colInd);\n\n    if (topLeftCell?.state === CellState.open && topLeftCell.value !== CellValue.bomb) {\n        if (topLeftCell.value === CellValue.none) {\n            newCells = openAdjacentNoneCells(newCells, rowInd - 1, colInd - 1)\n        } else {\n            newCells[rowInd - 1][colInd - 1].state = CellState.visible;\n        }\n    }\n\n    if (topCell?.state === CellState.open && topCell.value !== CellValue.bomb) {\n        if (topCell.value === CellValue.none) {\n            newCells = openAdjacentNoneCells(newCells, rowInd - 1, colInd);\n        } else {\n            newCells[rowInd - 1][colInd].state = CellState.visible;\n        }\n    }\n\n    if (topRightCell?.state === CellState.open && topRightCell.value !== CellValue.bomb) {\n        if (topRightCell.value === CellValue.none) {\n            newCells = openAdjacentNoneCells(newCells, rowInd - 1, colInd + 1);\n        } else {\n            newCells[rowInd - 1][colInd + 1].state = CellState.visible;\n        }\n    }\n\n    if (leftCell?.state === CellState.open && leftCell.value !== CellValue.bomb) {\n        if (leftCell.value === CellValue.none) {\n            newCells = openAdjacentNoneCells(newCells, rowInd, colInd - 1);\n        } else {\n            newCells[rowInd][colInd - 1].state = CellState.visible;\n        }\n    }\n\n    if (rightCell?.state === CellState.open && rightCell.value !== CellValue.bomb) {\n        if (rightCell.value === CellValue.none) {\n            newCells = openAdjacentNoneCells(newCells, rowInd, colInd + 1);\n        } else {\n            newCells[rowInd][colInd + 1].state = CellState.visible;\n        }\n    }\n\n    if (bottomLeftCell?.state === CellState.open && bottomLeftCell.value !== CellValue.bomb) {\n        if (bottomLeftCell.value === CellValue.none) {\n            newCells = openAdjacentNoneCells(newCells, rowInd + 1, colInd - 1);\n        } else {\n            newCells[rowInd + 1][colInd - 1].state = CellState.visible;\n        }\n    }\n\n    if (bottomCell?.state === CellState.open && bottomCell.value !== CellValue.bomb) {\n        if (bottomCell.value === CellValue.none) {\n            newCells = openAdjacentNoneCells(newCells, rowInd + 1, colInd);\n        } else {\n            newCells[rowInd + 1][colInd].state = CellState.visible;\n        }\n    }\n\n    if (bottomRightCell?.state === CellState.open && bottomRightCell.value !== CellValue.bomb) {\n        if (bottomRightCell.value === CellValue.none) {\n            newCells = openAdjacentNoneCells(newCells, rowInd + 1, colInd + 1);\n        } else {\n            newCells[rowInd + 1][colInd + 1].state = CellState.visible;\n        }\n    }\n\n    return newCells;\n}","export const MAX_ROWS = 9;\nexport const MAX_COLS = 9;\nexport const NUM_OF_BOMBS = 10;","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport Button from './components/Button/Button';\nimport NumberDisplay from './components/NumberDisplay/NumberDisplay';\nimport { generateCells, openAdjacentNoneCells } from './utils/generateCells';\nimport { Cell, CellState, CellValue, Face } from './types/types';\nimport { MAX_COLS, MAX_ROWS } from './constants/constants';\n\nfunction App() {\n  const [cells, setCells] = useState<Cell[][]>(generateCells());\n  const [face, setFace] = useState<string>(Face.smile);\n  const [time, setTime] = useState<number>(0);\n  const [isStarted, setIsStarted] = useState<boolean>(false);\n  const [numberOfBombs, setNumberOfBombs] = useState<number>(10);\n  const [lost, setLost] = useState<boolean>(false);\n  const [won, setWon] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!lost && !won) {\n      const handleDown = (): void => {\n      setFace(Face.oh);\n    }\n    const handleUp = (): void => {\n      setFace(Face.smile);\n    }\n    window.addEventListener('mousedown', handleDown);\n    window.addEventListener('mouseup', handleUp);\n\n    return () => {\n      window.removeEventListener('mousedown', handleDown);\n      window.removeEventListener('mouseup', handleUp);\n    }\n    }\n    \n  });\n\n  useEffect(() => {\n    if (isStarted && time < 999) {\n      const timer = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 1000);\n      return () => {\n        clearInterval(timer);\n      }\n    }\n  }, [isStarted, time]);\n\n\n  useEffect(() => {\n    if (lost) {\n      setIsStarted(false);\n      setFace(Face.lost);\n    }\n  }, [lost]);\n\n  useEffect(() => {\n    if (won) {\n      setIsStarted(false);\n      setFace(Face.won);\n    }\n  }, [won]);\n\n  const handleCellClick = (row: number, col: number) => (): void => {\n\n    if (lost) return;\n\n    let currentCells = cells.slice();\n    let curCell = cells[row][col];\n\n    if ([CellState.flagged, CellState.visible].includes(curCell.state)) {\n      return;\n    };\n\n    if (curCell.value === CellValue.bomb) {\n      setLost(true);\n      currentCells[row][col].red = true;\n      currentCells = showAllBombs();\n      setCells(currentCells);\n      setTime(time);\n      return;\n    } else if (curCell.value === CellValue.none) {\n      openAdjacentNoneCells(currentCells, row, col);\n    } else {\n      currentCells[row][col].state = CellState.visible;\n    }\n\n\n\n    let safeOpenCells = false;\n\n    for (let row = 0; row < MAX_ROWS; row++) {\n      for (let col = 0; col < MAX_COLS; col++) {\n        const curCell = currentCells[row][col];\n\n        if (curCell.state === CellState.open) {\n          safeOpenCells = true;\n          break;\n        }\n      }\n    }\n\n    if (!isStarted) {\n      let isABomb = currentCells[row][col].value === CellValue.bomb;\n      while (isABomb) {\n        currentCells = generateCells();\n        if (currentCells[row][col].value !== CellValue.bomb) {\n          isABomb = false;\n          break;\n        }\n      }\n      setIsStarted(true);\n    }\n\n    if (!safeOpenCells) {\n      currentCells = currentCells.map(row =>\n        row.map(col => {\n          if (col.value === CellValue.bomb) {\n            return {\n              ...col,\n              state: CellState.flagged\n            };\n          }\n          return col;\n        })\n      );\n      setWon(true);\n    }\n  }\n\n\n  const onClickContextMenu = (row: number, col: number) => (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.preventDefault();\n\n    if (!isStarted) {\n      return;\n    }\n    \n    const currentCells = cells.slice();\n    const curCell = cells[row][col];\n\n    if (curCell.state === CellState.visible) {\n      return;\n    } else if (curCell.state === CellState.open) {\n      currentCells[row][col].state = CellState.flagged;\n      setCells(currentCells);\n      setNumberOfBombs(prev => prev - 1);\n    } else if (curCell.state === CellState.flagged) {\n      currentCells[row][col].state = CellState.open;\n      setCells(currentCells);\n      setNumberOfBombs(prev => prev + 1);\n    }\n  }\n\n  const onFaceClick = (): void => {\n    setFace(Face.smile);\n    setLost(false);\n    setWon(false);\n    setIsStarted(false);\n    setTime(0);\n    setCells(generateCells());\n  }\n\n\n  const showAllBombs = (): Cell[][] => {\n    const currentCells = cells.slice();\n    return currentCells.map((row) => row.map((col) => {\n      if (col.value === CellValue.bomb) {\n        return {\n          ...col,\n          state: CellState.visible\n        }\n      }\n      return col;\n    }))\n  }\n\n  const renderCells = (): React.ReactNode => {\n    return cells.map((row, i_row) => row.map((col, i_col) => <Button key={`${i_row}_${i_col}`} value={col.value}\n      state={col.state} row={i_row} col={i_col} onCellClick={handleCellClick}\n      onClickContextMenu={onClickContextMenu} isRed={col.red} />))\n  }\n\n  return (<div className='App'>\n    <div className=\"header\">\n      <NumberDisplay value={numberOfBombs} />\n      <div className=\"face\" onClick={onFaceClick}>\n        <span role='img' aria-label='face'>\n          {face}\n        </span>\n      </div>\n      <NumberDisplay value={time} />\n    </div>\n\n    <div className=\"body\">\n      {renderCells()}\n    </div>\n  </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}